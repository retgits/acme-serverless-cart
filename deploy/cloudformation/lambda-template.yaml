AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

## A text string that describes the template.
Description: >
  The Cart service is part of the ACME Serverless Shop. The goal of this specific service is to keep track of carts and items in the different carts.

## Values to pass to your template at runtime (when you create or update a stack).
Parameters:
  Version:
    Type: String
  Author:
    Type: String
  Team:
    Type: String
  Feature:
    Type: String
    Default: acmeserverless
  Stage:
    Type: String
    Default: dev

Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"

## Specifies the stack resources and their properties.
Resources:
  AddCartItem:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-additem
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "AddCartItem-${Stage}"
      Description: A Lambda function to add an item to a cart
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        AddCartItemAPI:
          Type: Api
          Properties:
            Path: /cart/item/add/{userid}
            Method: POST
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  AddCartItemLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "AddCartItem"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref AddCartItem]]
  AllCarts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-all 
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "AllCarts-${Stage}"
      Description: A Lambda function to get all carts from DynamoDB
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        AllCartsAPI:
          Type: Api
          Properties:
            Path: /cart/all
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  AllCartsLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "AllCarts"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref AllCarts]]
  ClearCart:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-clear
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "ClearCart-${Stage}" 
      Description: A Lambda function to clear the cart of a user
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        ClearCartAPI:
          Type: Api
          Properties:
            Path: /cart/clear/{userid}
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  ClearCartLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "ClearCart"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref ClearCart]]
  ModifyCartItem:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-itemmodify
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "ModifyCartItem-${Stage}"
      Description: A Lambda function to modify an item to a cart
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        ModifyCartItemAPI:
          Type: Api
          Properties:
            Path: /cart/item/modify/{userid}
            Method: POST
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  ModifyCartItemLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "ModifyCartItem"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref ModifyCartItem]]
  CartItemsTotal:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-itemtotal
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "CartItemsTotal-${Stage}"
      Description: A Lambda function to get the total number of items in a cart from DynamoDB based on the userID
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        CartItemsTotalAPI:
          Type: Api
          Properties:
            Path: /cart/items/total/{userid}
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  CartItemsTotalLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "CartItemsTotal"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref CartItemsTotal]]
  ModifyCart:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-modify
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "ModifyCart-${Stage}"
      Description: A Lambda function to modify a cart
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        ModifyCartAPI:
          Type: Api
          Properties:
            Path: /cart/modify/{userid}
            Method: POST
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  ModifyCartLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "ModifyCart"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref ModifyCart]]
  CartTotal:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-total
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "CartTotal-${Stage}"
      Description: A Lambda function to get the total value of items in a cart from DynamoDB based on the userID
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        CartTotalAPI:
          Type: Api
          Properties:
            Path: /cart/total/{userid}
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  CartTotalLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "CartTotal"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref CartTotal]]
  UserCartItems:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-cart-user
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "UserCartItems-${Stage}"
      Description: A Lambda function to get cart items from DynamoDB based on the userID
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Cart"
      Environment:
        Variables:
          TABLE: "Cart"
      Events:
        UserCartItemsAPI:
          Type: Api
          Properties:
            Path: /cart/items/{userid}
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  UserCartItemsLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "UserCartItems"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/cart/", !Ref UserCartItems]]

## Describes the values that are returned whenever you view your stack's properties.
Outputs: 
  AddCartItemURL:
    Description: "API Gateway endpoint URL to add an item to a cart"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/item/add/{userid}"
  AllCartsURL:
    Description: "API Gateway endpoint URL to get all carts"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/all"
  ClearCartURL:
    Description: "API Gateway endpoint URL to clear a cart"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/clear/{userid}"
  ModifyCartItemURL:
    Description: "API Gateway endpoint URL to modify an item in a cart"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/item/modify/{userid}"
  CartItemsTotalURL:
    Description: "API Gateway endpoint URL to get the number of items in the cart"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/items/total/{userid}"
  ModifyCartURL:
    Description: "API Gateway endpoint URL to modify a cart"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/modify/{userid}"
  CartTotalURL:
    Description: "API Gateway endpoint URL to get the value of items in the cart"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/total/{userid}"
  UserCartItemsURL:
    Description: "API Gateway endpoint URL to get cart items from DynamoDB based on the userID"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/items/{userid}"